{"version":3,"file":"index.js","sourceRoot":"/","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["import * as core from \"@actions/core\"\nimport * as github from \"@actions/github\"\n\nfunction error(msg: string): never {\n    core.setFailed(msg)\n\n    throw new Error(msg)\n}\n\nexport async function run() {\n    try {\n        const payload = github.context.payload\n\n        const token = core.getInput(\"pat\")\n        const octokit = github.getOctokit(token)\n\n        console.log(JSON.stringify(payload, null, 4))\n\n        const owner =\n            payload.repository?.owner?.login ??\n            error(\"no repository owner found in payload\")\n        const repo =\n            payload.repository?.name ??\n            error(\"no repository name found in payload\")\n        const commentId = payload.comment?.id\n        if (commentId === undefined) {\n            return\n        }\n\n        if (payload.issue?.pull_request === undefined) {\n            core.info(\"No PR found in event. Ignoring.\")\n            return\n        }\n\n        await octokit.reactions.createForIssueComment({\n            owner,\n            repo,\n            comment_id: commentId,\n            content: \"eyes\",\n        })\n\n        const pullNumber =\n            payload.issue?.number ?? error(\"no issue number found in payload\")\n\n        const issue = await octokit.pulls.get({\n            owner,\n            repo,\n            pull_number: pullNumber,\n        })\n\n        const user = issue.data.user.login\n\n        const comment = payload.comment?.body\n        if (comment === undefined || typeof comment !== \"string\") {\n            return\n        }\n\n        const match = comment.match(/^\\/(.+?)(\\s|$)/)\n        if (match === null) {\n            console.log(\"No command found\")\n            return\n        }\n\n        const command = match[1]\n\n        const trigger = core.getInput(\"command\", { required: true })\n        if (command !== trigger) {\n            console.log(command + \" does not match trigger \" + trigger)\n            return\n        }\n\n        const workflowName = core.getInput(\"workflow\", { required: true })\n\n        let workflowId: number | undefined = undefined\n        let page = 1\n        while (true) {\n            const workflows = await octokit.actions.listRepoWorkflows({\n                owner,\n                repo,\n                page,\n                per_page: 50,\n            })\n\n            if (workflows.data.workflows.length === 0) {\n                break\n            }\n\n            const workflow = workflows.data.workflows.find(\n                (it) => it.name === workflowName\n            )\n            if (workflow !== undefined) {\n                workflowId = workflow.id\n                break\n            }\n\n            page++\n        }\n\n        const pr = issue.data\n        const ref = pr.head.ref\n\n        console.log(workflowId)\n        console.log(workflowName)\n\n        if (workflowId === undefined) {\n            console.log(\"did not find workflow \" + workflowName)\n            return\n        }\n\n        const result = await octokit.actions.createWorkflowDispatch({\n            owner,\n            repo,\n            workflow_id: workflowId,\n            ref,\n            inputs: {\n                comment: comment.toString(),\n                user: user.toString(),\n                commentId: commentId.toString(),\n            },\n        })\n\n        return\n    } catch (e) {\n        core.info(\"error\")\n        core.info(e.toString())\n        core.setFailed(e.message)\n        core.setFailed(e)\n    }\n}\n\nrun()\n"]}