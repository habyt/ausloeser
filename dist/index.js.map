{"version":3,"file":"index.js","sourceRoot":"/","sources":["index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,oDAAqC;AACrC,wDAAyC;AAEzC,SAAS,KAAK,CAAC,GAAW;IACtB,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAA;IAEnB,MAAM,IAAI,KAAK,CAAC,GAAG,CAAC,CAAA;AACxB,CAAC;AAEM,KAAK,UAAU,GAAG;;IACrB,IAAI;QACA,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAA;QACtC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;QACpB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;QAClB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAA;QAEnB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAA;QAE3C,IAAI,OAAA,OAAO,CAAC,KAAK,0CAAE,YAAY,MAAK,SAAS,EAAE;YAC3C,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;YACnB,OAAM;SACT;QAED,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAA;QAClC,MAAM,OAAO,GAAG,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAA;QAExC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;QACnB,MAAM,KAAK,GAAG,MAAM,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC;YACnC,KAAK,oBACD,OAAO,CAAC,UAAU,0CAAE,KAAK,0CAAE,KAAK,mCAChC,KAAK,CAAC,sCAAsC,CAAC;YACjD,IAAI,cACA,OAAO,CAAC,UAAU,0CAAE,IAAI,mCACxB,KAAK,CAAC,qCAAqC,CAAC;YAChD,YAAY,cACR,OAAO,CAAC,KAAK,0CAAE,MAAM,mCACrB,KAAK,CAAC,kCAAkC,CAAC;SAChD,CAAC,CAAA;QACF,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;QAEnB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAA;QAEzC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAA;QAE3C,OAAM;KACT;IAAC,OAAO,CAAC,EAAE;QACR,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;QAClB,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,CAAA;QACzB,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAA;KACpB;AACL,CAAC;AAzCD,kBAyCC;AAED,GAAG,EAAE,CAAA","sourcesContent":["import * as core from \"@actions/core\"\nimport * as github from \"@actions/github\"\n\nfunction error(msg: string): never {\n    core.setFailed(msg)\n\n    throw new Error(msg)\n}\n\nexport async function run() {\n    try {\n        const payload = github.context.payload\n        console.log(\"hallo\")\n        core.info(\"hallo\")\n        core.debug(\"hallo\")\n\n        core.info(JSON.stringify(payload, null, 4))\n\n        if (payload.issue?.pull_request === undefined) {\n            core.info(\"hallo2\")\n            return\n        }\n\n        const token = core.getInput(\"pat\")\n        const octokit = github.getOctokit(token)\n\n        core.info(\"hallo3\")\n        const issue = await octokit.issues.get({\n            owner:\n                payload.repository?.owner?.login ??\n                error(\"no repository owner found in payload\"),\n            repo:\n                payload.repository?.name ??\n                error(\"no repository name found in payload\"),\n            issue_number:\n                payload.issue?.number ??\n                error(\"no issue number found in payload\"),\n        })\n        core.info(\"hallo4\")\n\n        core.info(JSON.stringify(issue, null, 4))\n\n        core.info(JSON.stringify(payload, null, 4))\n\n        return\n    } catch (e) {\n        core.info(\"error\")\n        core.setFailed(e.message)\n        core.setFailed(e)\n    }\n}\n\nrun()\n"]}