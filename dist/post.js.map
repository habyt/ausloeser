{"version":3,"file":"post.js","sourceRoot":"/","sources":["post.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,oDAAqC;AACrC,wDAAyC;AACzC,wBAAyB;AAElB,KAAK,UAAU,OAAO;;IACzB,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAA;IAEtC,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAA;IAClC,MAAM,OAAO,GAAG,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAA;IAExC,MAAM,KAAK,qBACP,OAAO,CAAC,UAAU,0CAAE,KAAK,0CAAE,KAAK,mCAChC,QAAK,CAAC,sCAAsC,CAAC,CAAA;IACjD,MAAM,IAAI,eACN,OAAO,CAAC,UAAU,0CAAE,IAAI,mCAAI,QAAK,CAAC,qCAAqC,CAAC,CAAA;IAC5E,MAAM,SAAS,eAAG,OAAO,CAAC,OAAO,0CAAE,EAAE,yCAAI,OAAO,CAAC,MAAM,0CAAE,SAAS,CAAA;IAClE,IAAI,SAAS,KAAK,SAAS,EAAE;QACzB,OAAM;KACT;IAED,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAA;IAEpD,IAAI,OAAO,CAAC,MAAM,KAAK,SAAS,EAAE;QAC9B,MAAM,IAAI,GAAG,MAAM,OAAO,CAAC,KAAK,CAAC,gBAAgB,EAAE,CAAA;QACnD,IAAI,CAAC,IAAI,CAAC,KAAK,CAAA;QACf,MAAM,SAAS,GAAG,MAAM,OAAO,CAAC,SAAS,CAAC,mBAAmB,CAAC;YAC1D,KAAK;YACL,IAAI;YACJ,UAAU,EAAE,SAAS;SACxB,CAAC,CAAA;QACF,MAAM,QAAQ,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,CAChC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE,CACtC,CAAA;QACD,IAAI,QAAQ,KAAK,SAAS,EAAE;YACxB,MAAM,OAAO,CAAC,SAAS,CAAC,qBAAqB,CAAC;gBAC1C,KAAK;gBACL,IAAI;gBACJ,UAAU,EAAE,SAAS;gBACrB,WAAW,EAAE,QAAQ,CAAC,EAAE;aAC3B,CAAC,CAAA;SACL;KACJ;AACL,CAAC;AAtCD,0BAsCC;AAED,OAAO,EAAE,CAAA","sourcesContent":["import * as core from \"@actions/core\"\nimport * as github from \"@actions/github\"\nimport { error } from \".\"\n\nexport async function postRun() {\n    const payload = github.context.payload\n\n    const token = core.getInput(\"pat\")\n    const octokit = github.getOctokit(token)\n\n    const owner =\n        payload.repository?.owner?.login ??\n        error(\"no repository owner found in payload\")\n    const repo =\n        payload.repository?.name ?? error(\"no repository name found in payload\")\n    const commentId = payload.comment?.id ?? payload.inputs?.commentId\n    if (commentId === undefined) {\n        return\n    }\n\n    console.log(JSON.stringify(github.context, null, 4))\n\n    if (payload.inputs !== undefined) {\n        const user = await octokit.users.getAuthenticated()\n        user.data.login\n        const reactions = await octokit.reactions.listForIssueComment({\n            owner,\n            repo,\n            comment_id: commentId,\n        })\n        const reaction = reactions.data.find(\n            (it) => it.user.id === user.data.id\n        )\n        if (reaction !== undefined) {\n            await octokit.reactions.deleteForIssueComment({\n                owner,\n                repo,\n                comment_id: commentId,\n                reaction_id: reaction.id,\n            })\n        }\n    }\n}\n\npostRun()\n"]}